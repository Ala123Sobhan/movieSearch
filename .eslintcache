[{"C:\\Users\\ala12\\movie-search-app\\src\\reportWebVitals.js":"1","C:\\Users\\ala12\\movie-search-app\\src\\App.js":"2","C:\\Users\\ala12\\movie-search-app\\src\\index.js":"3","C:\\Users\\ala12\\movie-search-app\\src\\pages\\Topratedmovies.js":"4","C:\\Users\\ala12\\movie-search-app\\src\\pages\\PageInfo.js":"5","C:\\Users\\ala12\\movie-search-app\\src\\pages\\MovieSearch.js":"6","C:\\Users\\ala12\\movie-search-app\\src\\pages\\Tvsearch.js":"7","C:\\Users\\ala12\\movie-search-app\\src\\pages\\Popularmovies.js":"8","C:\\Users\\ala12\\movie-search-app\\src\\pages\\Home.js":"9","C:\\Users\\ala12\\movie-search-app\\src\\pages\\RemovieRow.js":"10","C:\\Users\\ala12\\movie-search-app\\src\\pages\\Watchlist.js":"11","C:\\Users\\ala12\\movie-search-app\\src\\context\\AppReducer.js":"12","C:\\Users\\ala12\\movie-search-app\\src\\pages\\TvRows.js":"13","C:\\Users\\ala12\\movie-search-app\\src\\context\\GlobalState.js":"14","C:\\Users\\ala12\\movie-search-app\\src\\pages\\MovieRows.js":"15","C:\\Users\\ala12\\movie-search-app\\src\\components\\Speech.js":"16","C:\\Users\\ala12\\movie-search-app\\src\\pages\\MovieSearching.js":"17","C:\\Users\\ala12\\movie-search-app\\src\\pages\\TvSearching.js":"18"},{"size":362,"mtime":499162500000,"results":"19","hashOfConfig":"20"},{"size":2696,"mtime":1606877274097,"results":"21","hashOfConfig":"20"},{"size":735,"mtime":1606877274104,"results":"22","hashOfConfig":"20"},{"size":1514,"mtime":1606877274116,"results":"23","hashOfConfig":"20"},{"size":1061,"mtime":1607018028221,"results":"24","hashOfConfig":"20"},{"size":2697,"mtime":1607008397973,"results":"25","hashOfConfig":"20"},{"size":2211,"mtime":1606877274119,"results":"26","hashOfConfig":"20"},{"size":1548,"mtime":1606878091234,"results":"27","hashOfConfig":"20"},{"size":842,"mtime":1606877274106,"results":"28","hashOfConfig":"20"},{"size":696,"mtime":1606259437984,"results":"29","hashOfConfig":"20"},{"size":2350,"mtime":1606878545419,"results":"30","hashOfConfig":"20"},{"size":880,"mtime":1606877274099,"results":"31","hashOfConfig":"20"},{"size":4141,"mtime":1606877274117,"results":"32","hashOfConfig":"20"},{"size":1830,"mtime":1606831031577,"results":"33","hashOfConfig":"20"},{"size":4306,"mtime":1606877274107,"results":"34","hashOfConfig":"20"},{"size":503,"mtime":1606948337715,"results":"35","hashOfConfig":"20"},{"size":4144,"mtime":1607017535723,"results":"36","hashOfConfig":"20"},{"size":4082,"mtime":1607018177181,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"1uj6d8v",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"45"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"75"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"78","messages":"79","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83"},"C:\\Users\\ala12\\movie-search-app\\src\\reportWebVitals.js",[],["84","85"],"C:\\Users\\ala12\\movie-search-app\\src\\App.js",[],"C:\\Users\\ala12\\movie-search-app\\src\\index.js",[],["86","87"],"C:\\Users\\ala12\\movie-search-app\\src\\pages\\Topratedmovies.js",[],"C:\\Users\\ala12\\movie-search-app\\src\\pages\\PageInfo.js",["88","89"],"import React from 'react'\r\nimport Watchlist from \"./Watchlist\"\r\nimport {Switch, Route} from \"react-router-dom\"\r\nimport MovieSearch from './MovieSearch'\r\nimport Tvsearch from './Tvsearch'\r\nimport Topratedmovies from './Topratedmovies'\r\nimport Popularmovies from './Popularmovies'\r\nimport Home from './Home'\r\nimport MovieSearching from './MovieSearching'\r\nimport TvSearching from './TvSearching'\r\nfunction PageInfo() {\r\n    return (\r\n        <div >\r\n          <Switch>\r\n           {/* <Route path=\"/tvsearch\"> < Tvsearch/> </Route>*/}\r\n            <Route path=\"/tvsearch\"> < TvSearching/> </Route>\r\n            <Route path=\"/topratedmovies\"> <Topratedmovies /> </Route>\r\n            <Route path=\"/popularmovies\"> < Popularmovies/> </Route>\r\n            <Route path=\"/watchlist\"> <Watchlist/> </Route>\r\n            {/*<Route path=\"/moviesearch\"> < MovieSearch/> </Route>*/}\r\n            <Route path=\"/moviesearch\"> < MovieSearching/> </Route>\r\n            <Route path=\"/\"> < Home/> </Route>\r\n          </Switch>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PageInfo","C:\\Users\\ala12\\movie-search-app\\src\\pages\\MovieSearch.js",[],["90","91"],"C:\\Users\\ala12\\movie-search-app\\src\\pages\\Tvsearch.js",[],"C:\\Users\\ala12\\movie-search-app\\src\\pages\\Popularmovies.js",[],"C:\\Users\\ala12\\movie-search-app\\src\\pages\\Home.js",[],"C:\\Users\\ala12\\movie-search-app\\src\\pages\\RemovieRow.js",[],["92","93"],"C:\\Users\\ala12\\movie-search-app\\src\\pages\\Watchlist.js",[],"C:\\Users\\ala12\\movie-search-app\\src\\context\\AppReducer.js",["94"],"C:\\Users\\ala12\\movie-search-app\\src\\pages\\TvRows.js",["95","96","97","98","99","100"],"import React, {useContext } from 'react';\r\nimport {GlobalContext} from '../context/GlobalState';\r\n\r\nvar movieRows =[]\r\nvar movie_Res =[]\r\nvar title = []\r\nfunction TvRows(props) {\r\n\r\n    const {\r\n        addTvToWatchlist, \r\n        tv_watchlist,\r\n      } = useContext(GlobalContext);\r\n\r\n      const check_Disability =(id)=>{\r\n     \r\n      \r\n        let storedMovie = tv_watchlist.find((o) => o.tv.id === id);\r\n        let watchlistDisabled = storedMovie ? true : false\r\n        //console.log(watchlistDisabled)\r\n         return watchlistDisabled\r\n  \r\n    }\r\n\r\n\r\n   \r\n    const  viewTv=()=>{\r\n        //onsole.log(\"in view movie--\"+this.props.tv.name)\r\n        const url = \"https://www.themoviedb.org/tv/\"+props.tv.id\r\n        //window.location.href = url\r\n        window.open( url, \"_blank\");\r\n    }\r\n\r\n    const movieInfo_newWindow=()=>{\r\n        movieRows.forEach((tv)=>{\r\n        let imgSrc = tv.poster_path\r\n        const info = \r\n        \"<table>\"+\r\n        \"<tbody>\"+\r\n        \"<tr>\"+\r\n        '<td><text><img src=\"' + imgSrc + '\"></text></td>'+ \r\n\r\n        \"<td>\"+ \"<h2>\"+tv.name+\"</h2>\" + \r\n        \"<p>\"+tv.overview+\"</p>\"+\r\n        \"</td>\" +\r\n        \r\n\r\n         \"</tr>\"+\r\n         \"</tbody>\"+\r\n         \"</table>\"+\r\n          \"<hr>\"\r\n         \r\n        \r\n        title.push(info)\r\n     })\r\n\r\n}\r\n\r\nconst opennewWindow=()=>{\r\n  \r\n       \r\n       var popwindow = window.open(\"\", \"_blank\"); \r\n       popwindow.document.write( `<h1>Recommendation Based On \"${props.tv.name}\"</h1>`)\r\n\r\n       movieRows.forEach((tv)=>{\r\n       \r\n       \r\n        let imgSrc = tv.poster_path\r\n       \r\n       \r\n\r\n        const info = \r\n        \"<table>\"+\r\n        \"<tbody>\"+\r\n        \"<tr>\"+\r\n      \r\n        '<td><text><img src=\"' + imgSrc + '\"></text></td>'+ \r\n\r\n        \"<td>\"+ \"<h2>\"+tv.name+\"</h2>\" + \r\n         \"<p>\"+tv.overview+\"</p>\"+\r\n         \"</td>\" +\r\n        \r\n\r\n         \"</tr>\"+\r\n         \"</tbody>\"+\r\n         \"</table>\"+\r\n          \"<hr>\"\r\n         \r\n          popwindow.document.write(info);\r\n       // title.push(info)\r\n     })\r\n     //  popwindow.document.write('<h1 className=recom-title>Recommendation Page</h1>'+title);\r\n\r\n       title =[]\r\n      \r\n\r\n}\r\n\r\n  const getRecommendation =async()=>{\r\n       console.log(\"in get recom\")\r\n    try{\r\n    \r\n    const tv_id = props.tv.id\r\n    let url =`https://api.themoviedb.org/3/tv/${tv_id}/recommendations?api_key=5958134e04ed9ecbbf6100cd3a582d3d`\r\n\r\n    let response = await fetch(url)\r\n    const data = await response.json()\r\n    \r\n    const results = data.results;\r\n    movie_Res = results\r\n    //console.log(results)\r\n\r\n         \r\n         movieRows =[]\r\n        results.forEach((tv) =>\r\n        {\r\n            \r\n            tv.poster_path = \"https://image.tmdb.org/t/p/w185\"+ tv.poster_path\r\n            tv.name = tv.name\r\n            tv.overview = tv.overview\r\n           // const movieRow = <RemovieRow key ={movie.id} movie={movie}/>\r\n               \r\n          //  console.log(movie)\r\n           \r\n            movieRows.push(tv)\r\n            \r\n        })\r\n\r\n       \r\n         \r\n        \r\n       opennewWindow()\r\n        \r\n\r\n       movieRows= []\r\n        \r\n    }\r\n    catch(error){\r\n        console.log(error)\r\n    }\r\n\r\n}\r\n    return (\r\n        <div>\r\n            <table key ={props.tv.id}>\r\n            <tbody>\r\n                <tr>\r\n                    <td>\r\n                        <img alt =\"poster\" src ={props.tv.poster_path}/>\r\n                    </td>\r\n\r\n                    <td>\r\n                        <h3> {props.tv.name} </h3>\r\n                        <p>{props.tv.overview}</p>\r\n\r\n                        <button className=\"btn\" onClick={viewTv} value=\"View\"> View </button>\r\n                        <button className=\"btn\" onClick={getRecommendation} value=\"View\"> Get Recommendation </button>\r\n                        <button className=\"btn\"\r\n                            disabled={check_Disability(props.tv.id)}\r\n                            onClick={()=>addTvToWatchlist(props)}> Add To Watchlist </button>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TvRows\r\n","C:\\Users\\ala12\\movie-search-app\\src\\context\\GlobalState.js",[],"C:\\Users\\ala12\\movie-search-app\\src\\pages\\MovieRows.js",["101","102","103","104","105","106"],"import React, {useContext } from 'react';\r\nimport {GlobalContext} from '../context/GlobalState';\r\n\r\nvar movieRows =[]\r\nvar movie_Res =[]\r\nvar title = []\r\n\r\nfunction MovieRows(props) {\r\n\r\n    const {\r\n        addMovieToWatchlist, \r\n        watchlist,\r\n        } = useContext(GlobalContext);\r\n\r\n    \r\n\r\n    const check_Disability =(id)=>{\r\n\r\n        let storedMovie = watchlist.find((o) => o.movie.id === id);\r\n        let watchlistDisabled = storedMovie ? true : false\r\n        //console.log(watchlistDisabled)\r\n         return watchlistDisabled\r\n  \r\n    }\r\n\r\n    const viewMovie=()=>{\r\n        console.log(\"in view movie--\"+props.movie.title)\r\n        const url = \"https://www.themoviedb.org/movie/\"+props.movie.id\r\n        window.open(url, \"_blank\");\r\n    }\r\n    \r\n    \r\n\r\n  const  movieInfo_newWindow=()=>{\r\n\r\n            movieRows.forEach((movie)=>{\r\n            let imgSrc = movie.poster_path\r\n        \r\n          \r\n          //  console.log(movie.poster_path)\r\n\r\n            const info = \r\n            \"<table>\"+\r\n            \"<tbody>\"+\r\n            \"<tr>\"+\r\n        \r\n            '<td><text><img src=\"' + imgSrc + '\"></text></td>'+ \r\n\r\n            \"<td>\"+ \"<h2>\"+movie.title+\"</h2>\" + \r\n            \"<p>\"+movie.overview+\"</p>\"+\r\n            \"</td>\" +\r\n            \r\n\r\n            \"</tr>\"+\r\n            \"</tbody>\"+\r\n            \"</table>\"+\r\n            \"<hr>\"\r\n            \r\n            title.push(info)\r\n        })\r\n    }\r\n\r\n  const  opennewWindow=()=>{\r\n    \r\n        var popwindow = window.open(\"\", \"_blank\"); \r\n        popwindow.document.write( `<h1 className=recom-title>Recommendation Based On \"${props.movie.title}\"</h1>`)\r\n        movieRows.forEach((movie)=>{\r\n        let imgSrc = movie.poster_path\r\n        \r\n        //let button = <button onClick={this.viewReMovie}>view</button>\r\n        //console.log(movie.poster_path)\r\n        const info = \r\n        \"<table>\"+\r\n        \"<tbody>\"+\r\n        \"<tr>\"+\r\n        \r\n        '<td><text><img src=\"' + imgSrc + '\"></text></td>'+ \r\n\r\n        \"<td>\"+ \"<h2>\"+movie.title+\"</h2>\" + \r\n        \"<p>\"+movie.overview+\"</p>\"+\r\n        \"</td>\" +\r\n            \r\n        \"</tr>\"+\r\n        \"</tbody>\"+\r\n        \"</table>\"+\r\n        \"<hr>\"\r\n        popwindow.document.write(info);\r\n\r\n      \r\n        })\r\n        \r\n       \r\n        title =[]\r\n\r\n    }\r\n   const getRecommendation =async()=>{\r\n        try{\r\n        \r\n        const movie_id = props.movie.id\r\n        let url =`https://api.themoviedb.org/3/movie/${movie_id}/recommendations?api_key=5958134e04ed9ecbbf6100cd3a582d3d`\r\n\r\n        let response = await fetch(url)\r\n       // console.log(response)\r\n        const data = await response.json()\r\n        //console.log(data)\r\n        const results = data.results;\r\n        movie_Res = results\r\n       // console.log(results)\r\n       // var movieRows =[]\r\n            movieRows =[]\r\n            results.forEach((movie) =>\r\n            {\r\n                movie.poster_path = \"https://image.tmdb.org/t/p/w185\"+ movie.poster_path\r\n                movie.title = movie.title\r\n                movie.overview = movie.overview\r\n             \r\n                movieRows.push(movie)\r\n                \r\n            })\r\n          \r\n            \r\n        opennewWindow()\r\n            movieRows= []\r\n\r\n        }\r\n        catch(error){\r\n            console.log(error)\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            <table key ={props.movie.id}>\r\n            <tbody>\r\n                <tr>\r\n                    <td>\r\n                        <img alt =\"poster\" src ={props.movie.poster_path}/>\r\n                    </td>\r\n                    <td>\r\n                        <h3> {props.movie.title} </h3>\r\n                        <p>{props.movie.overview}</p>\r\n                        <button className=\"btn\" onClick={viewMovie} value=\"View\"> View </button>\r\n                        <button className=\"btn\" onClick={getRecommendation} value=\"View\"> Get Recommendation </button>\r\n                        <button className=\"btn\"\r\n                        disabled={check_Disability(props.movie.id)}\r\n                        onClick={()=>addMovieToWatchlist(props)}> Add To Watchlist </button>\r\n                        \r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MovieRows\r\n",["107","108"],"C:\\Users\\ala12\\movie-search-app\\src\\components\\Speech.js",["109"],"C:\\Users\\ala12\\movie-search-app\\src\\pages\\MovieSearching.js",["110","111"],"import React,{useState,useEffect} from 'react'\r\nimport MovieRows from \"./MovieRows\"\r\nimport \"../App.css\"\r\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\r\nimport { Modal, Button } from \"react-bootstrap\"\r\n\r\n\r\n\r\nfunction MovieSearching() {\r\n    const [rows, setRows] = useState([])\r\n    const [inputVal, setInput] = useState('');\r\n    const [show, setShow] = useState(false);\r\n\r\n    const handleClose = () => \r\n    {\r\n      setShow(false);\r\n    }\r\n    const handleShow = () =>{\r\n       setShow(true);\r\n    }\r\n\r\n\r\n  const {\r\n   transcript,\r\n   interimTranscript,\r\n   finalTranscript,\r\n   resetTranscript,\r\n   listening,\r\n } = useSpeechRecognition();\r\n\r\n useEffect(() => {\r\n   if (finalTranscript !== '') {\r\n     console.log('Got final result:', finalTranscript);\r\n   }\r\n }, [interimTranscript, finalTranscript]);\r\n\r\n if (!SpeechRecognition.browserSupportsSpeechRecognition()) {\r\n     alert(\"Voice Recognition not compatible with the browser\")\r\n     console.log('Your browser does not support speech recognition software! Try Chrome desktop, maybe?');\r\n     //return null;\r\n }\r\n\r\n const listenContinuously = () => {\r\n\r\n   SpeechRecognition.startListening({\r\n     continuous: true,\r\n     language: 'en-GB',\r\n     \r\n\r\n   });\r\n    \r\n    \r\n    resetDone()\r\n    handleShow()\r\n\r\n };\r\n\r\n const listeningDone = () =>{\r\n\r\n    handleClose()\r\n    SpeechRecognition.stopListening()\r\n\r\n    setInput(transcript)\r\n    renderMovieInfo(transcript)\r\n    \r\n\r\n }\r\n  const resetDone =() =>{\r\n\r\n    setInput('')\r\n    resetTranscript()\r\n\r\n  }\r\n\r\n   const  handleChange=(event)=>{\r\n        setInput(event.target.value)\r\n        const searchTerm = event.target.value\r\n        renderMovieInfo(searchTerm)\r\n    }\r\n   \r\n\r\n   const renderMovieInfo= async(searchTerm)=>{\r\n        try{\r\n        //for movies & tv\r\n        let url = \"https://api.themoviedb.org/3/search/multi?api_key=5958134e04ed9ecbbf6100cd3a582d3d&query=\"+searchTerm\r\n\r\n        let response = await fetch(url)\r\n            const data = await response.json()\r\n            const results = data.results;\r\n           // console.log(results)\r\n\r\n        var movieRows =[]\r\n            results.forEach((movie) =>\r\n            {\r\n                movie.poster_path = \"https://image.tmdb.org/t/p/w185\"+ movie.poster_path\r\n                //const movieRow = this.getMovieRows(movie)\r\n               // const movieRow = <MovieRow key={movie.id} movie={movie}/>\r\n               const movieRow = <MovieRows key={movie.id} movie={movie}/>\r\n               // console.log(movieRow)\r\n                movieRows.push(movieRow)\r\n                \r\n            })\r\n            setRows(movieRows)\r\n           \r\n        }catch(error){\r\n            console.log(error)\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n             <div className=\"movieSearch-container\">\r\n                <h1 style={{fontFamily:\"Montserrat\", fontWeight:\"bold\"}}>Movie Search</h1>\r\n                <input className =\"input\" value={inputVal}\r\n                 style={{\r\n                    fontSize: 24,\r\n                    display: \"block\",\r\n                    width: \"75%\",\r\n                    paddingTop: 8,\r\n                    paddingBottom: 8,\r\n                    paddingRight: 20,\r\n                    marginRight: 10\r\n                }}\r\n                onChange={handleChange}\r\n                placeholder=\"Enter a movie....\" />\r\n                 <button type=\"button\" onClick={resetDone}>Reset</button>\r\n                 <button type=\"button\" onClick={listenContinuously}>Listen</button>\r\n                 <button type=\"button\" onClick={listeningDone}>Stop</button>\r\n\r\n                 <div> {rows}</div>\r\n                 <div>\r\n                 <Modal\r\n        show={show}\r\n        onHide={handleClose}\r\n        backdrop=\"static\"\r\n        keyboard={false}\r\n        centered\r\n       \r\n      >\r\n     \r\n        <Modal.Title><h6>Listenining...</h6></Modal.Title>\r\n        \r\n        <Modal.Body>\r\n        <h6>{transcript}</h6>\r\n        </Modal.Body>\r\n      </Modal>\r\n       </div>\r\n                \r\n                 \r\n               \r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MovieSearching\r\n","C:\\Users\\ala12\\movie-search-app\\src\\pages\\TvSearching.js",["112","113"],"import React,{useState,useEffect} from 'react'\r\nimport TvRows from \"./TvRows\"\r\nimport \"../App.css\"\r\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\r\nimport { Modal, Button } from \"react-bootstrap\"\r\n\r\n\r\nfunction TvSearching() {\r\n    const [rows, setRows] = useState([])\r\n    const [inputVal, setInput] = useState('');\r\n    const [show, setShow] = useState(false);\r\n\r\n    const handleClose = () => \r\n    {\r\n      setShow(false);\r\n    }\r\n    const handleShow = () =>{\r\n       setShow(true);\r\n    }\r\n\r\n\r\n  const {\r\n   transcript,\r\n   interimTranscript,\r\n   finalTranscript,\r\n   resetTranscript,\r\n   listening,\r\n } = useSpeechRecognition();\r\n\r\n useEffect(() => {\r\n   if (finalTranscript !== '') {\r\n     console.log('Got final result:', finalTranscript);\r\n   }\r\n }, [interimTranscript, finalTranscript]);\r\n\r\n if (!SpeechRecognition.browserSupportsSpeechRecognition()) {\r\n     alert(\"Voice Recognition not compatible with the browser\")\r\n     console.log('Your browser does not support speech recognition software! Try Chrome desktop, maybe?');\r\n     //return null;\r\n }\r\n\r\n const listenContinuously = () => {\r\n\r\n   SpeechRecognition.startListening({\r\n     continuous: true,\r\n     language: 'en-GB',\r\n     \r\n\r\n   });\r\n    \r\n    \r\n    resetDone()\r\n    handleShow()\r\n\r\n };\r\n\r\n const listeningDone = () =>{\r\n\r\n    handleClose()\r\n    SpeechRecognition.stopListening()\r\n\r\n    setInput(transcript)\r\n    renderMovieInfo(transcript)\r\n    \r\n\r\n }\r\n  const resetDone =() =>{\r\n\r\n    setInput('')\r\n    resetTranscript()\r\n\r\n  }\r\n\r\n   const  handleChange=(event)=>{\r\n        setInput(event.target.value)\r\n        const searchTerm = event.target.value\r\n        renderMovieInfo(searchTerm)\r\n    }\r\n   \r\n\r\n   const renderMovieInfo= async(searchTerm)=>{\r\n    try{\r\n\r\n        //for tv\r\n        let url = \"https://api.themoviedb.org/3/search/tv?api_key=5958134e04ed9ecbbf6100cd3a582d3d&query=\"+searchTerm\r\n         \r\n         let response = await fetch(url)\r\n         const data = await response.json()\r\n         const results = data.results;\r\n        //console.log(results)\r\n\r\n\r\n         var movieRows =[]\r\n         results.forEach((tv) =>\r\n         {\r\n             \r\n             tv.poster_path = \"https://image.tmdb.org/t/p/w185\"+ tv.poster_path\r\n             //const movieRow = this.getMovieRows(movie)\r\n             \r\n            // const movieRow = <TvRow key={tv.id} tv={tv}/>\r\n             const movieRow = <TvRows key={tv.id} tv={tv}/>\r\n             //console.log(movieRow)\r\n             movieRows.push(movieRow)\r\n             \r\n         })\r\n         setRows(movieRows)\r\n     \r\n     }catch(error){\r\n         console.log(\" here: \"+error)\r\n     }\r\n    }\r\n    return (\r\n        <div>\r\n            <div className=\"tvSearch-container\">\r\n                <h1 style={{fontFamily:\"Montserrat\", fontWeight:\"bold\"}}> TV Search </h1>\r\n                <div>\r\n                <input className=\"input\" value={inputVal}\r\n                style={{\r\n                    fontSize: 24,\r\n                    display: \"block\",\r\n                    width: \"96%\",\r\n                    paddingTop: 8,\r\n                    paddingBottom: 8,\r\n                    paddingRight: 20,\r\n                    marginRight: 10\r\n                }}\r\n                onChange={handleChange}\r\n                placeholder=\"Enter a TV show....\" />\r\n                  <button type=\"button\" onClick={resetDone}>Reset</button>\r\n                 <button type=\"button\" onClick={listenContinuously}>Listen</button>\r\n                 <button type=\"button\" onClick={listeningDone}>Stop</button>\r\n\r\n                {rows}\r\n                </div>\r\n\r\n                <div>\r\n                <Modal\r\n        show={show}\r\n        onHide={handleClose}\r\n        backdrop=\"static\"\r\n        keyboard={false}\r\n        centered\r\n       \r\n      >\r\n     \r\n        <Modal.Title><h6>Listenining...</h6></Modal.Title>\r\n        \r\n        <Modal.Body>\r\n        <h6>{transcript}</h6>\r\n        </Modal.Body>\r\n      </Modal>\r\n                </div>\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TvSearching\r\n",{"ruleId":"114","replacedBy":"115"},{"ruleId":"116","replacedBy":"117"},{"ruleId":"114","replacedBy":"118"},{"ruleId":"116","replacedBy":"119"},{"ruleId":"120","severity":1,"message":"121","line":4,"column":8,"nodeType":"122","messageId":"123","endLine":4,"endColumn":19},{"ruleId":"120","severity":1,"message":"124","line":5,"column":8,"nodeType":"122","messageId":"123","endLine":5,"endColumn":16},{"ruleId":"114","replacedBy":"125"},{"ruleId":"116","replacedBy":"126"},{"ruleId":"114","replacedBy":"127"},{"ruleId":"116","replacedBy":"128"},{"ruleId":"129","severity":1,"message":"130","line":1,"column":1,"nodeType":"131","endLine":30,"endColumn":3},{"ruleId":"120","severity":1,"message":"132","line":33,"column":11,"nodeType":"122","messageId":"123","endLine":33,"endColumn":30},{"ruleId":"133","severity":1,"message":"134","line":42,"column":15,"nodeType":"135","messageId":"136","endLine":42,"endColumn":16},{"ruleId":"133","severity":1,"message":"134","line":78,"column":15,"nodeType":"135","messageId":"136","endLine":78,"endColumn":16},{"ruleId":"120","severity":1,"message":"137","line":109,"column":5,"nodeType":"122","messageId":"123","endLine":109,"endColumn":14},{"ruleId":"138","severity":1,"message":"139","line":118,"column":23,"nodeType":"140","messageId":"141","endLine":118,"endColumn":30},{"ruleId":"138","severity":1,"message":"142","line":119,"column":27,"nodeType":"140","messageId":"141","endLine":119,"endColumn":38},{"ruleId":"120","severity":1,"message":"132","line":34,"column":10,"nodeType":"122","messageId":"123","endLine":34,"endColumn":29},{"ruleId":"133","severity":1,"message":"134","line":49,"column":19,"nodeType":"135","messageId":"136","endLine":49,"endColumn":20},{"ruleId":"133","severity":1,"message":"134","line":79,"column":15,"nodeType":"135","messageId":"136","endLine":79,"endColumn":16},{"ruleId":"120","severity":1,"message":"137","line":107,"column":9,"nodeType":"122","messageId":"123","endLine":107,"endColumn":18},{"ruleId":"138","severity":1,"message":"143","line":114,"column":31,"nodeType":"140","messageId":"141","endLine":114,"endColumn":42},{"ruleId":"138","severity":1,"message":"144","line":115,"column":34,"nodeType":"140","messageId":"141","endLine":115,"endColumn":48},{"ruleId":"114","replacedBy":"145"},{"ruleId":"116","replacedBy":"146"},{"ruleId":"120","severity":1,"message":"147","line":4,"column":25,"nodeType":"122","messageId":"123","endLine":4,"endColumn":40},{"ruleId":"120","severity":1,"message":"148","line":5,"column":17,"nodeType":"122","messageId":"123","endLine":5,"endColumn":23},{"ruleId":"120","severity":1,"message":"149","line":28,"column":4,"nodeType":"122","messageId":"123","endLine":28,"endColumn":13},{"ruleId":"120","severity":1,"message":"148","line":5,"column":17,"nodeType":"122","messageId":"123","endLine":5,"endColumn":23},{"ruleId":"120","severity":1,"message":"149","line":27,"column":4,"nodeType":"122","messageId":"123","endLine":27,"endColumn":13},"no-native-reassign",["150"],"no-negated-in-lhs",["151"],["150"],["151"],"no-unused-vars","'MovieSearch' is defined but never used.","Identifier","unusedVar","'Tvsearch' is defined but never used.",["150"],["151"],["150"],["151"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'movieInfo_newWindow' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","'movie_Res' is assigned a value but never used.","no-self-assign","'tv.name' is assigned to itself.","MemberExpression","selfAssignment","'tv.overview' is assigned to itself.","'movie.title' is assigned to itself.","'movie.overview' is assigned to itself.",["150"],["151"],"'resetTranscript' is assigned a value but never used.","'Button' is defined but never used.","'listening' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]